generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

//用户
model User {
  id          Int        @id @default(autoincrement())
  username    String     @unique @db.VarChar(30)
  nickName    String?    @map("nick_name") @db.VarChar(50)
  password    String?    @db.VarChar(100)
  email       String?    @unique @db.VarChar(50)
  phoneNumber String?    @map("phone_number") @db.VarChar(25)
  avatarUrl   String?    @map("avatar_url") @db.VarChar(100)
  gender      String?    @db.VarChar(100)
  biography   String?    @db.VarChar(500)
  country     String?    @db.VarChar(25)
  province    String?    @db.VarChar(25)
  city        String?    @db.VarChar(25)
  website     String?    @db.VarChar(50)
  enabled     Boolean    @default(true)
  birthDate   DateTime?  @map("birth_date") @db.Date
  /// 用户 - 认证
  auths       Auth[]
  /// 用户 - 角色
  //userRoles   UserRole[]
  /// 创建时间
  createdAt   DateTime?  @default(now()) @map("created_at") @db.Timestamptz(3)
  /// 创建人
  createdBy   Int?       @map("created_by")
  /// 更新时间
  updatedAt   DateTime?  @updatedAt @map("updated_at") @db.Timestamptz(3)
  /// 更新人
  updatedBy   Int?       @map("updated_by")
  /// 删除时间
  deletedAt   DateTime?  @map("deleted_at") @db.Timestamptz(3)
  /// 删除人
  deletedBy   Int?       @map("deleted_by")
  UserRole    UserRole[]

  @@map("system_user")
}

/// 认证类型
enum AuthType {
  USERNAME
  PHONE_NUMBER
  EMAIL
  GITHUB
  GOOGLE
  WECHAT
  ALIPAY
}

//认证
model Auth {
  id           Int      @id @default(autoincrement())
  authType     AuthType @map("auth_type'")
  openId       String   @map("open_id") @db.VarChar(50)
  accessToken  String?  @map("access_token") @db.VarChar(255)
  refreshToken String?  @map("refresh_token") @db.VarChar(255)

  /// 关联到用户(User)实体，表示该身份验证属于哪个用户。使用了外键关系，关联字段为userId。
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  /// 创建时间
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  /// 创建人
  createdBy Int?      @map("created_by")
  /// 更新时间
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  /// 更新人
  updatedBy Int?      @map("updated_by")
  /// 删除时间
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  /// 删除人
  deletedBy Int?      @map("deleted_by")

  @@unique([authType, openId])
  @@map("system_auth")
}

/// 角色
model Role {
  /// 唯一标识
  id      Int     @id @default(autoincrement())
  /// 角色编码
  code    String  @unique @db.VarChar(50)
  /// 名称
  label   String  @db.VarChar(50)
  /// 备注
  remark  String? @db.VarChar(500)
  /// 是否启用
  enabled Boolean @default(true)
  /// 排序
  sort    Int     @default(0)

  /// 用户 - 角色
  userRoles UserRole[]

  /// 创建时间
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  /// 创建人
  createdBy Int?      @map("created_by")
  /// 更新时间
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  /// 更新人
  updatedBy Int?      @map("updated_by")
  /// 删除时间
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  /// 删除人
  deletedBy Int?      @map("deleted_by")

  @@map("system_role")
}

/// 用户 - 角色
model UserRole {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])

  userId Int @map("user_id")

  role Role @relation(fields: [roleId], references: [id])

  roleId Int @map("role_id")

  /// 创建时间
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  /// 创建人
  createdBy Int?      @map("created_by")
  /// 更新时间
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  /// 更新人
  updatedBy Int?      @map("updated_by")
  /// 删除时间
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  /// 删除人
  deletedBy Int?      @map("deleted_by")

  @@map("system_user_role")
}

model Department {
  id        Int     @id @default(autoincrement())
  leader    String? @db.VarChar(50)
  label     String  @db.VarChar(50)
  remark    String? @db.VarChar(50)
  enabled   Boolean @default(true)
  sort      Int     @default(0)
  /// 祖先部门
  parentIds Int[]   @map("parent_Ids")

  /// 父级部门
  parent   Department?  @relation("DepartmentToParent", fields: [parentId], references: [id])
  /// 父级部门 ID
  parentId Int?         @map("parent_id")
  /// 子级部门
  children Department[] @relation("DepartmentToParent")

  /// 创建时间
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(3)
  /// 创建人
  createdBy Int?      @map("created_by")
  /// 更新时间
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(3)
  /// 更新人
  updatedBy Int?      @map("updated_by")
  /// 删除时间
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)
  /// 删除人
  deletedBy Int?      @map("deleted_by")

  @@map("system_department")
}

/// 字典
model Dictionary {
  id              Int              @id @default(autoincrement())
  code            String           @unique @db.VarChar(50)
  label           String           @db.VarChar(50)
  remark          String?          @db.VarChar(500)
  enabled         Boolean          @default(true)
  dictionaryItems DictionaryItem[]
  /// 创建时间
  createdAt       DateTime?        @default(now()) @map("created_at") @db.Timestamptz(3)
  /// 创建人
  createdBy       Int?             @map("created_by")
  /// 更新时间
  updatedAt       DateTime?        @updatedAt @map("updated_at") @db.Timestamptz(3)
  /// 更新人
  updatedBy       Int?             @map("updated_by")
  /// 删除时间
  deletedAt       DateTime?        @map("deleted_at") @db.Timestamptz(3)
  /// 删除人
  deletedBy       Int?             @map("deleted_by")

  @@map("system_dictionary")
}

/// 字典数据
model DictionaryItem {
  id           Int        @id @default(autoincrement())
  value        String     @db.VarChar(255)
  label        String     @db.VarChar(50)
  remark       String?    @db.VarChar(500)
  enable       Boolean    @default(true)
  sort         Int        @default(0)
  /// 字典
  dictionary   Dictionary @relation(fields: [dictionaryId], references: [id])
  /// 字典 ID
  dictionaryId Int        @map("dictionary_id")
  /// 创建时间
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamptz(3)
  /// 创建人
  createdBy    Int?       @map("created_by")
  /// 更新时间
  updatedAt    DateTime?  @updatedAt @map("updated_at") @db.Timestamptz(3)
  /// 更新人
  updatedBy    Int?       @map("updated_by")
  /// 删除时间
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz(3)
  /// 删除人
  deletedBy    Int?       @map("deleted_by")

  @@map("system_dictionary_item")
}
